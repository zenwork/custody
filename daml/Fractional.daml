module Fractional where

import Shared

type TokenPoolId = ContractId TokenPool
type TokenId = ContractId Token

-- fractionalisation of artwork under custody
template TokenPool
  with
    artwork: ArtworkKey
    issuer: Party
    balance: Int
    tokens:[TokenId]
  where
    signatory issuer 
    ensure
      balance > 0
    choice MintToken : (TokenPoolId, TokenId, ArtworkTokenKey)
      with
        buyer: Party
      controller issuer
        do
          assert (balance - 1 > -1)
          let id =(artwork._2, 100 - this.balance)
          t <- create Token with { issuer = issuer, owner = buyer, id = id }
          p <- create this with { balance = (this.balance -1), tokens = t :: tokens }
          return (p, t, (issuer, id ))
    

 -- tradeable token representing a fraction of an artwork in custody 
template Token
  with
    issuer: Party
    owner: Party
    id: (Text,Int)
  where
    signatory issuer
    observer owner

    key (issuer, id) : ArtworkTokenKey
    maintainer key._1
    
    choice Sell : ArtworkTokenKey
      with
        buyer: Party
      controller owner
        do
          assert (buyer /= owner)
          create this with owner=buyer
          return (issuer,id)



