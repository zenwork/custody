module Fractional where

import Shared

type TokenPoolId = ContractId TokenPool
type TokenId = ContractId Token

-- fractionalisation of artwork under custody
template TokenPool
  with
    artworkKey: ArtworkKey
    issuer: Party
    balance: Int
    tokens:[TokenId]
  where
    signatory issuer 

    agreement
      "contract to mint tokens and manage the balance of remaining tokens"
      
    ensure
      balance > 0
    choice MintToken : (TokenPoolId, Token)
      with
        buyer: Party
      controller issuer
        do
          assert (balance - 1 > -1)
          let id = 100 - this.balance
          tid <- create Token with { issuer = issuer, owner = buyer, id = id, artworkKey= artworkKey }
          p <- create this with { balance = (this.balance -1), tokens = tid :: tokens }
          (tid, t) <- fetchByKey @Token (issuer, id, artworkKey)
          return (p, t)
    

 -- tradeable token representing a fraction of an artwork in custody 
template Token
  with
    issuer: Party
    owner: Party
    id: Int
    artworkKey: ArtworkKey
  where
    signatory issuer
    observer owner

    key (issuer, id, artworkKey) : ArtworkTokenKey
    maintainer key._1
    
    agreement
      "tradeable token representing 1/100th of an artwork's value"

    choice TransferTo : ArtworkTokenKey
      with
        receiver: Party
      controller owner
        do
          assert (receiver /= owner)
          create this with owner=receiver
          return (issuer, id, artworkKey)



