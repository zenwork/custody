module Main where

import Daml.Script
import Custody
import Fractional
import Wallet


-- TEST 1
e2e_test_1 : Script (TokenPoolId)
e2e_test_1 = do
  -- parties
  carlos <-  allocateParty "Carlos the Collector"
  acme <- allocateParty "Acme Shipping"
  storage <- allocateParty "Big Box Storage"
  custodian <- allocateParty "Digital Marketplace"
  inspector <- allocateParty "Professor Smith"
  buyer <- allocateParty "Ian Investor"

  -- wallets
  wallet1 <- submit buyer do createCmd (walletFor (buyer)) 
  wallet2 <- submit carlos do createCmd (walletFor (carlos)) 
  wallet3 <- submit inspector do createCmd (walletFor (inspector)) 

  -- create artwork
  picasso <- submit carlos do createCmd (artworkFor (carlos, "Les Femmes d'Alger"))

  -- bring artwork into custody
  picasso <- submit carlos do exerciseCmd picasso ReleaseToShipper with shipper = acme
  picasso <- submit acme do exerciseCmd picasso ReleaseToStorage with storage = storage
  picasso <- submit storage do exerciseCmd picasso SetInspector with expert = inspector
  picasso <- submit inspector do exerciseCmd picasso IsAuthentic with inspection = True
  picasso <- submit storage do exerciseCmd picasso ReleaseToCustodian with custodian = custodian

  -- tokenize artwork
  pool <- submit custodian do exerciseCmd picasso Tokenise

  (pool, token1, tokenId1) <- submit custodian do exerciseCmd pool MintToken with {buyer = buyer}
  wallet1 <- submit buyer do exerciseCmd wallet1 Put with {token = tokenId1}

  (pool, token2, tokenId2)  <- submit custodian do exerciseCmd pool MintToken with {buyer = carlos}
  wallet2 <- submit carlos do exerciseCmd wallet2 Put with {token = tokenId2}

  (pool, token3, tokenId3)  <- submit custodian do exerciseCmd pool MintToken with {buyer = inspector}
  wallet3 <- submit inspector do exerciseCmd wallet3 Put with {token = tokenId3}
  
  
  -- marketplace transactions
  -- wallet2 <-  submit carlos do exerciseCmd wallet2 Transfer {token=token2, reciever=wallet3, payment=2}
  -- submit inspector do exerciseCmd token3 Sell {buyer=buyer}

  return pool
