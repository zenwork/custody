module Wallet where

import Fractional
import Shared

type WalletId = ContractId Wallet

template Wallet 
  with
    owner : Party
    id: Text
    tokenKeys :[ ArtworkTokenKey ]
    balance: Int
  where
    signatory owner

    key (owner, id) : WalletKey
    maintainer key._1

    agreement
      "simplistic implementation of a wallet to hold on to a partie's tokens and currency balance"

    choice Put : WalletId
      with 
        token: Token
      controller owner
        do
          let tokenKey = (token.owner, token.id, token.artworkKey)
          create this with {tokenKeys = tokenKey :: tokenKeys}

    choice Remove : WalletId
      with
        tokenKey: ArtworkTokenKey
      controller owner
        do
          -- not sure why i have to compare key props separately
          create this with {tokenKeys = filter (\(t) -> (t._1 /= tokenKey._1 && t._2 /= tokenKey._2 && t._3 /= tokenKey._3)) tokenKeys}

    choice Deposit : WalletId
      with
        amount: Int
      controller owner
        do
          create this with {balance = balance + amount} 

    choice Debit : WalletId
      with
        amount: Int
      controller owner
        do
          create this with {balance = balance - amount} 

walletFor : (Party) -> Wallet
walletFor(p) = Wallet with 
{owner=p, tokenKeys=[], balance=20, id="abc-123"}

template WalletTransfer
  with
    giver: Party
    taker: Party
    tokenKey: ArtworkTokenKey
    amountDue: Int
    tokenHold: Optional(ArtworkTokenKey)
    amountTransfered: Optional(Int)
  where
    signatory giver
    observer taker

    agreement
      "short lived contract to process a wallet to wallet transfer"

    choice GiveToken : ContractId WalletTransfer
      with      
        controller giver
        do
          exerciseByKey @Wallet (giver, "abc-123") Remove with tokenKey = tokenKey
          exerciseByKey @Token tokenKey TransferTo with receiver=taker
          create this with { tokenHold = Some tokenKey}

    choice TakeToken : ContractId WalletTransfer
          with      
            controller taker
            do
              (id, t) <- fetchByKey @Token tokenKey
              exerciseByKey @Wallet (taker, "abc-123") Put with token = t
              exerciseByKey @Wallet (taker, "abc-123") Debit with amount = amountDue
              create this with { amountTransfered = Some amountDue, tokenHold = None}

    choice GetPayment : ContractId WalletTransfer
      with      
        controller giver
        do
          exerciseByKey @Wallet (giver, "abc-123") Deposit with amount = amountDue
          create this with { amountTransfered = None }

transfer : (Party, Party, Token, Int) -> WalletTransfer
transfer(p1,p2,t,d) = WalletTransfer with
{
  giver = p1, 
  taker = p2,   
  tokenKey = (t.issuer, t.id, t.artworkKey), 
  amountDue = d, 
  amountTransfered = None, 
  tokenHold = None
}