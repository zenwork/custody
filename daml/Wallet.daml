module Wallet where

import Fractional
import Shared

type WalletId = ContractId Wallet

template Wallet 
  with
    owner : Party
    id: Text
    tokens :[ ArtworkTokenKey ]
    balance: Int
  where
    signatory owner

    key (owner, id) : WalletKey
    maintainer key._1

    agreement
      "simplistic implementation of a wallet to hold on to a partie's tokens and currency balance"

    choice Put : WalletId
      with 
        token: Token
      controller owner
        do
          let tokenKey = (token.owner, token.id, token.artworkKey)
          create this with {tokens = tokenKey :: tokens}

    choice Remove : WalletId
      with
        token: ArtworkTokenKey
      controller owner
        do
          create this with {tokens = filter (/=token) tokens}

walletFor : (Party) -> Wallet
walletFor(p) = Wallet with 
{owner=p, tokens=[], balance=10, id="abc-123"}

template WalletTransfer
  with
    senderParty: Party
    senderWallet: WalletKey 
    counterparty: Party
    token: ArtworkTokenKey
    amount: Int
  where
    signatory senderParty

    agreement
      "short lived contract to process a wallet to wallet transfer"

    choice AcceptTransfer : (WalletId, WalletId)
      with      
        controller counterparty
        do
          (wid, w) <- fetchByKey @Wallet (senderParty, "abc-123")
          (rid, r) <- fetchByKey @Wallet (counterparty, "abc-123")
          s <- create w with {tokens = filter (/=token) w.tokens, balance = w.balance + amount }  
          r <- create r with {tokens = token :: r.tokens,  balance = r.balance - amount} 
          return (s,r)
          